package samples;

public class FindSumOfIntegersInArray {

    public static void main(String[] args) {
        int[] a = twoSum(new int[]{1, 2, 3}, 4);                      // 0, 2
        for (int i : a) System.out.print(i + " ");
        System.out.println();
        int[] b = twoSum(new int[]{1234, 5678, 9012}, 14690);         // 1, 2
        for (int i : b) System.out.print(i + " ");
        System.out.println();
        int[] c = twoSum(new int[]{2, 2, 3}, 4);                      // 0, 1
        for (int i : c) System.out.print(i + " ");
        System.out.println();
        int[] d = twoSum(new int[]{
                73, 132, 412, 744, -955, -32, 957, -988, 200, 600, -691, -483, 143, -82, 912, -304, 264, -48, 277, -504, -166, -45, 596, 227, 326, 674, 614, 647, -906, -674, -728, -909, 139, 846, -742, 551, 67, -897, 76, 104, 635, -536, 78, 832, 422, -405, -304, -808, 532, -678, -949, 809, 401, 405, 795, -698, 552, -946, 338, -289, -559, 54, 974, -877, 748, 467, -399, -896, -396, -66, 615, 416, -453, -951, -185, 443, -51, -999, -634, 199, -333, 752, -130, 880, -349, -710, 868, 565, 60, -355, -758, 260, 714, -500, 354, 257, -95, -786, -139, 286, 452, -414, -582, -164, 85, -446, 583, -886, -892, -240, -244, -374, -373, -883, 62, 349, 884, 665, -976, 14, -124, -968, -886, -519, -174, 112, -569, -408, -559, 20, -99, -519, -134, 765, 197, 17, -807, -342, -136, -548, -353, -248, 108, -696, -868, -687, -193, 214, -597, -501, 316, 739, -190, -148, 855, -927, 628, 313, 777, -238, 358, -980, 453, -830, 393, -48, -556, -231, -401, -838, -663, -802, 64, -35, 482, 153, 203, -952, -837, -990, 458, 137, -790, 95, -538, 716, 581, -401, -303, 998, -246, -357, 209, 213, -69, 52, 879, 460, 275, 803, -811, -161, -588, -155, 517, -668, -562, 516, 590, 782, -829, -866, 468, -333, 648, -260, 938, 101, -415, -79, 622, 690, 14, -233, -982, -175, -166, 774, -605, 613, 156, 628, -795, -735, 602, -407, 730, -419, 140, 492, -719, -765, 185, -867, -314, -848, -154, -387, 304, -504, -800, -465, 861, 705, -544, -350, -352, -372, 970, 490, 600, -698, -839, 657, 586, -321, -317, -807, 900, -931, 263, 881, 420, -118, -757, -1, -30, 591, 239, 762, -352, -43, 928, -590, -804, 298, 379, -365, -467, -524, -367, -767, -567, 637, -457, -50, -550, 190, 920, -208, 61, 363, 885, 734, -317, -855, 883, -426, -650, -786, 156, 960, 257, -923, -396, -170, -400, -824, -798, 262, -591, 723, 568, -389, 534, 241, -298, -336, 834, 265, -831, 229, -744, -555, -525, -508, -481, -932, 52, -597, -866, 120, -136, 0, -307, -579, -866, -763, 421, -895, 475, 508, 769, 581, -754, 522, 519, 367, -453, 566, 28, 286, 363, -402, 623, -178, 926, -220, 93, -410, -557, -425, -680, -908, 48, 505, 560, 843, -711, -917, 113, 532, 134, -212, -478, -397, 739, -864, 178, 69, 481, -469, -826, 964, 370, -335, 182, 898, 705, -610, 95, -610, 148, -439, 68, -237, 53, 853, 501, -93, 682, 335, 859, -328, 203, -281, 289, -303, -628, -807, -466, -765, -56, 614, -668, 133, -913, 867, 366, 519, 17, -287, 848, 268, 694, -931, 630, 135, -257, -337, -699, 413, 560, 32, 829, -598, 474, 571, 518, -429, 465, 588, -292, 377, 635, 557, -411, 915, 905, -220, -235, -155, 205, -898, -785, -695, -834, 122, 246, -720, -373, 320, -458, 747, -812, -483, -640, -538, 757, -50, -883, -52, -898, -451, -174, 507, 100, 5, -978, -868, -780, 164, -627, 377, 458, 271, 74, 925, 636, 317, 737, -356, 374, 391, -483, -58, 246, 785, -13, 382, -535, 953, -163, 759, 832, 797, -900, -575, 426, 972, 13, 146, -137, 165, 809, -369, 470, -582, 271, -881, -253, 54, 518, 815, -148, -523, -527, -482, 671, 813, -425, 556, 623, 932, 854, -594, -81, -345, 173, -988, 333, -926, 545, -658, -407, 545, 133, 88}, -644);                         // 0, 1
        for (int i : d) System.out.print(i + " ");                          // -644
        System.out.println();
    }

    public static int[] twoSum(int[] numbers, int target) {
        if (numbers.length < 2) return null;

        int[] result = new int[2];
        int iterator = 0;

        for (int i = 0; i < numbers.length; i++) {

            for (int k = i + 1; k < numbers.length; k++) {

                if ((numbers[i] + numbers[k]) == target) {
                    result[iterator] = i; iterator ++;
                    result[iterator] = k;
                    return result;
                }
            }
        }
        return result;
    }
}
